@model Flight_Tracker.Models.Customer

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Details</h1>
<div>
    <h4>Customer</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FirstName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.LastName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.LastName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.UserName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.UserName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Email)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Email)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
<h2>Map</h2>
<style>    
    #map {
        height: 400px;
        width: 700px;
    }
</style>

<div class="row">
    <div id="right-panel"></div>
    <div id="map"></div>
    &nbsp;
    <div id="warnings-panel"></div>
    <script>
        function initMap() {
            var markerArray = [];
             var start = { lat:@Model.startLatitude, lng: @Model.startLongitude};
                    var end = { lat:@Model.endLatitude, lng: @Model.endLongitude};
            var directionsRenderer = new google.maps.DirectionsRenderer;
            var directionsService = new google.maps.DirectionsService;
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 13,
                center: { lat:@Model.startLatitude, lng: @Model.startLongitude }
            });
            directionsRenderer.setMap(map);
            directionsRenderer.setPanel(document.getElementById('right-panel'));
           
            var stepDisplay = new google.maps.InfoWindow;
         
            calculateAndDisplayRoute(
                directionsService, directionsRenderer);           
        }
        function calculateAndDisplayRoute(directionsService, directionsRenderer
            ) {var start = { lat:@Model.startLatitude, lng: @Model.startLongitude};
                    var end = { lat:@Model.endLatitude, lng: @Model.endLongitude};           
            directionsService.route({
                origin: { lat:@Model.startLatitude, lng: @Model.startLongitude},
                destination: { lat:@Model.endLatitude, lng: @Model.endLongitude},
                travelMode: 'DRIVING'         
            }, function (response, status) {               
                    if (status === 'OK') {
                        directionsRenderer.setDirections(response);
                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
            });
        }

        function showSteps(directionResult, markerArray, stepDisplay, map) {         
            var myRoute = directionResult.routes[0].legs[0];
            for (var i = 0; i < myRoute.steps.length; i++) {
                var marker = markerArray[i] = markerArray[i] || new google.maps.Marker;
                marker.setMap(map);
                marker.setPosition(myRoute.steps[i].start_location);
                attachInstructionText(
                    stepDisplay, marker, myRoute.steps[i].instructions, map);
            }
        }

        function attachInstructionText(stepDisplay, marker, text, map) {
            google.maps.event.addListener(marker, 'click', function () {                
                stepDisplay.setContent(text);
                stepDisplay.open(map, marker);
            });
        }
    </script>

    <script async defer src="https://maps.googleapis.com/maps/api/js?key=@APIKeys.GoogleAPI&language=en&callback=initMap"></script>
</div>
   

   

