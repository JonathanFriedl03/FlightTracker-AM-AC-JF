@model Flight_Tracker.Models.CustomerFlightInfoViewModel
@{
    ViewData["Title"] = "FlightInfo";
}
<style>
    #clock {
        color: black;
        font-size: 56px;
        text-align: center;
        padding-top: 20px;
        padding-bottom: 20px;
    }

    #timeDisplay {
        color: black;
        font-size: 56px;
        text-align: center;
        padding-top: 20px;
        padding-bottom: 20px;
    }

    * {
        box-sizing: border-box;
    }

    .column {
        float: left;
        width: 33.33%;
        padding: 5px;
    }

    .row::after {
        content: "";
        clear: both;
        display: table;
    }

    #map {
        height: 400px;
        width: 700px;
    }

    #time {
        margin-top: 10px;
    }

    #selectTime {
        margin-top: 10px;
    }

    #right-panel {
        padding: 15px;
        width: 37%;
        height: 415px;
        overflow: scroll;
        border: 1px solid #ccc;
    }
</style>
<br />
<div class="border backgroundWhite">
    <div class="row">
        <div class="col-6">
            <h2>@Html.DisplayFor(Model => Model.FlightInfo.Airline) Flight: @Html.DisplayFor(Model => Model.FlightInfo.FlightNumber)</h2>
        </div>
    </div>
    <br />
    <center><h2>Current Time</h2></center>
    <div id="clock"></div>
    @if (ViewBag.TransitTIme != null)
    {
        <div>
            <center><h2>Time to Leave for @Html.DisplayFor(Model => Model.FlightInfo.Airport)</h2></center>
            <div id="timeDisplay">@ViewBag.LeaveTime</div>
        </div>
    }
    else
    {
        <div style="display: none;">
            <center><h2>Time to Leave for the Airport</h2></center>
            <div id="timeDisplay">@ViewBag.LeaveTime</div>
        </div>
    }
    @if (ViewBag.TimeCheck == true)
    {
        <div style="color:red;">Your Selected Arrival Time is Not Within Range of TSA Timeslots</div>
    }
    else
    {
        <div style="color:red; display:none;">Your Selected Arrival Time is Not Within Range of TSA Timeslots</div>
    }
    <button id="selectTime" class="btn btn-primary" onclick="showTimeInput()">Select New Arrival Time</button>
    <form asp-action="FlightInfo" method="post" id="time" style="display:none;">
        <div>
            <input name="time" type="time" class="col-form-label" />
            <button type="submit" value="Submit" class="btn btn-success">Submit</button>
        </div>
    </form>
    <div class="container">
        @if (Model.FlightInfo.SelectedArrivalTime != null)
        {
            DateTime time = DateTime.Today.Add(Model.FlightInfo.SelectedArrivalTime.Value);
            string displayTime = time.ToString("hh:mm tt");
            <div class="row">
                <span><strong>Selected Terminal Arrival Time:</strong> @displayTime</span>
            </div>
        }
        else
        {
            <div class="row" style="display:none;">
                <span><strong>Selected Terminal Arrival Time:</strong>uhhhhh</span>
            </div>
        }

        <div class="row">
            <span><strong>Departure:</strong> @Html.DisplayFor(Model => Model.FlightInfo.Airport) @Html.DisplayFor(Model => Model.FlightInfo.EstimatedDeparture)</span>
        </div>
        <div class="row">
            <span><strong>Arrival:</strong> @Html.DisplayFor(Model => Model.FlightInfo.ArrivalAirport) @Html.DisplayFor(Model => Model.FlightInfo.EstimatedArrival)</span>
        </div>
        @if (Model.FlightInfo.SelectedArrivalTime != null)
        {
            TimeSpan time = TimeSpan.FromMinutes(Model.Customer.duration.Value);
            double mins = time.Minutes;
            <div class="row">
                <span><strong>Estimated Transit Time to</strong> @Html.DisplayFor(Model => Model.FlightInfo.Airport): @time.Hours hours and @Math.Round(mins) minutes</span>
            </div>
        }

        @if (ViewBag.TransitTIme != null)
        {
            var totalTime = ViewBag.TransitTime;
            TimeSpan time = TimeSpan.FromMinutes(totalTime);
            double mins = time.Minutes;

            TimeSpan tsaTime = TimeSpan.FromMinutes(Model.FlightInfo.TSAWaitTimeOnArrival.Value);
            double tsaMins = tsaTime.Minutes;

            <div class="row">
                <span><strong>Estimated TSA Wait Time:</strong> @tsaTime.Hours hours and @Math.Round(tsaMins) minutes</span>
            </div>
            <div class="row">
                <span><strong>Estimated Total Time To Reach Terminal:</strong> @time.Hours hours and @Math.Round(mins) minutes</span>
            </div>
        }
        else
        {
            <div class="row" style="display: none;">
                <span><strong>Estimated Total Time To Reach Terminal:</strong> @ViewBag.TransitTime minutes</span>
            </div>
        }

    </div>
</div>
<script>
    function currentTime() {
        var date = new Date();
        var day = date.getDate();
        var month = date.getMonth() + 1;
        var year = date.getFullYear();
        var hour = date.getHours();
        var min = date.getMinutes();
        var sec = date.getSeconds();
        var timeOfDay;
        if (hour >= 12) {
            timeOfDay = "PM"
        }
        else {
            timeOfDay = "AM"
        }
        if (hour == 0) {
            hour = 12;
        }
        if (min < 10) {
            min = "0" + min;
        }
        if (sec < 10) {
            sec = "0" + sec;
        }
        if (hour > 12) {
            hour = hour - 12;
        }

        var time = month + "/" + day + "/" + year + "  " + hour + ":" + min + ":" + sec + " " + timeOfDay;
        document.getElementById("clock").innerHTML = time;
        var t = setTimeout(function () { currentTime() }, 1000);
    }
    currentTime();
    function showTimeInput() {
        var x = document.getElementById("time")
        var z = document.getElementById("selectTime")
        if (x.style.display === "none") {
            x.style.display = "block";
            z.style.marginBottom = "0px";
        }
        else {
            x.style.display = "none";
            z.style.marginBottom = "10px";
        }
    }
    window.onload = function () {
        var z = document.getElementById("selectTime")
        z.style.marginBottom = "10px";
    }
    function blink() {
        var x = document.getElementById("clock");
        if (@DateTime.Now > @ViewBag.LeaveTimeData && x.style.display === "none") {
            x.style.display = "block"
            x.style.color = "red"
        }
        else {
            x.style.display = "none";
        }
        var t = setTimeout(function () { blink() }, 500);
    }
</script>
@if (Model.FlightInfo.SelectedArrivalTime != null)
{
    <h2>Map</h2>
    <br />

    <div class="row">
        <div id="map" class="column"></div>
        <div id="right-panel" class="column"></div>
        &nbsp;
        <div id="warnings-panel"></div>
        <script>
        function initMap() {
            var directionsRenderer = new google.maps.DirectionsRenderer;
            var directionsService = new google.maps.DirectionsService;
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 13,
                center: { lat:@Model.Customer.startLatitude, lng: @Model.Customer.startLongitude}
            });
            directionsRenderer.setMap(map);
            directionsRenderer.setPanel(document.getElementById('right-panel'));

            calculateAndDisplayRoute( directionsService, directionsRenderer);
        }
        function calculateAndDisplayRoute(directionsService, directionsRenderer
            ) {
            directionsService.route({
                origin: { lat:@Model.Customer.startLatitude, lng: @Model.Customer.startLongitude},
                destination: { lat:@Model.Customer.endLatitude, lng: @Model.Customer.endLongitude},
                travelMode: 'DRIVING'
            }, function (response, status) {
                    if (status === 'OK') {
                        directionsRenderer.setDirections(response);
                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
            });
        }
        </script>
        <script async defer src="https://maps.googleapis.com/maps/api/js?key=@APIKeys.GoogleAPI&language=en&callback=initMap&libraries=directions"></script>
    </div>
}
else
{
    <div></div>
}

